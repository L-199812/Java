/**
 * @Auther King
 * @Description:
 */
// java里面一切皆对象，同C++、PYTHON
//    一般一个文件一个类
class person {
//        属性，字段，成员变量
//        行为，方法，成员函数
    public int age;
}

// 实例化对象是用new，对象里面没有方法，只有属性才会属于类对象，占对象的内存
// 一个类可以用new实例化多个对象


// 形参不小心和成员变量名相同的话,是形参给形参自己赋值，局部变量优先
// this引用，就是为了指明谁调用这个方法，也就是将对象和类联系起来的一种机制
public class class1 {
    public static void main(String[] args) {

    }

}

// JAVA里面的构造函数和C++一样的，构造函数会有默认的无参构造，但是自己写了就不会提供默认的了,写的构造函数都加上public
// 实例化对象的时候会触发构造函数，构造函数调用了之后才会有对象

// 构造函数里面使用this();调用类里面的其他对构造函数,必须写在第一行,且不构成循环
//构造方法可以重载,写的时候最好写全,才能确保构造出全部对象,只调用一次
// 构造函数必须和类名相同,没有返回类型

// 除了单例模式等特殊情况,都是使用public修饰构造函数

// this访问成员变量this.,this访问成员函数this.,this访问构造函数this()
// 面向对象的三大特性:封装\继承\多态


// 要实现封装就要有公私保护默认等属性,public private,protected,default
// 属性私有,公有方法接口去使用内部的属性等,隐藏细节,对外只提供公开的接口就是封装

// java多了default这个属性,对本包内的所有是公开的,但是其他包就是不可访问的,默认就是default
// c++类里面默认是私有的,结构体默认是公开的

// 为了更好的管理类,把多个类收集在一个成为一个组,称为软件包,起始就是一个文件夹下面的import导入

// 静态成员变量，不属于某个具体的对象，是类的属性，所有对象共享，不存在某个对象的空间中
// 静态成员变量既可以通过对象访问，也可以通过类名访问，存储在方法区当中
// 不能在静态方法中访问任何飞静态成员变量，静态方法中不能调用任何非静态方法，因为非静态方法中有this参数，在静态方法中不能传递this引用
// 静态方法不能重写，不能用来实现多态

// 静态代码块，实例代码块，不带参数的构造函数；静态代码块只执行一次，其他的new一次执行一次
// 静态代码块是在加载类的时候就被执行，实例代码块是在构造对象的时候执行

